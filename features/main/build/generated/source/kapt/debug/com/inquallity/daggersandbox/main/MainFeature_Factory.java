// Generated by Dagger (https://dagger.dev).
package com.inquallity.daggersandbox.main;

import com.inquallity.daggersandbox.mainer.IMainer;
import com.inquallity.daggersandbox.scanner.IScanner;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainFeature_Factory implements Factory<MainFeature> {
  private final Provider<IMainer> mainerProvider;

  private final Provider<IScanner> scannerProvider;

  public MainFeature_Factory(Provider<IMainer> mainerProvider, Provider<IScanner> scannerProvider) {
    this.mainerProvider = mainerProvider;
    this.scannerProvider = scannerProvider;
  }

  @Override
  public MainFeature get() {
    return newInstance(mainerProvider.get(), scannerProvider.get());
  }

  public static MainFeature_Factory create(Provider<IMainer> mainerProvider,
      Provider<IScanner> scannerProvider) {
    return new MainFeature_Factory(mainerProvider, scannerProvider);
  }

  public static MainFeature newInstance(IMainer mainer, IScanner scanner) {
    return new MainFeature(mainer, scanner);
  }
}
